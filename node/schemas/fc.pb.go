// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: fc.proto

package schemas

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeygenStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *KeygenStart) Reset() {
	*x = KeygenStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeygenStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeygenStart) ProtoMessage() {}

func (x *KeygenStart) ProtoReflect() protoreflect.Message {
	mi := &file_fc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeygenStart.ProtoReflect.Descriptor instead.
func (*KeygenStart) Descriptor() ([]byte, []int) {
	return file_fc_proto_rawDescGZIP(), []int{0}
}

func (x *KeygenStart) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type KeygenMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To          []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	IsBroadcast bool   `protobuf:"varint,3,opt,name=isBroadcast,proto3" json:"isBroadcast,omitempty"`
	Payload     []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	Round       uint32 `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *KeygenMessage) Reset() {
	*x = KeygenMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeygenMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeygenMessage) ProtoMessage() {}

func (x *KeygenMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeygenMessage.ProtoReflect.Descriptor instead.
func (*KeygenMessage) Descriptor() ([]byte, []int) {
	return file_fc_proto_rawDescGZIP(), []int{1}
}

func (x *KeygenMessage) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *KeygenMessage) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *KeygenMessage) GetIsBroadcast() bool {
	if x != nil {
		return x.IsBroadcast
	}
	return false
}

func (x *KeygenMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *KeygenMessage) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type SignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallData []byte `protobuf:"bytes,1,opt,name=callData,proto3" json:"callData,omitempty"` // do we need abi here?
}

func (x *SignatureRequest) Reset() {
	*x = SignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureRequest) ProtoMessage() {}

func (x *SignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureRequest.ProtoReflect.Descriptor instead.
func (*SignatureRequest) Descriptor() ([]byte, []int) {
	return file_fc_proto_rawDescGZIP(), []int{2}
}

func (x *SignatureRequest) GetCallData() []byte {
	if x != nil {
		return x.CallData
	}
	return nil
}

type Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Content:
	//
	//	*Content_KeygenStart
	//	*Content_Keygen
	//	*Content_SignatureRequest
	Content isContent_Content `protobuf_oneof:"content"`
}

func (x *Content) Reset() {
	*x = Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_fc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_fc_proto_rawDescGZIP(), []int{3}
}

func (m *Content) GetContent() isContent_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *Content) GetKeygenStart() *KeygenStart {
	if x, ok := x.GetContent().(*Content_KeygenStart); ok {
		return x.KeygenStart
	}
	return nil
}

func (x *Content) GetKeygen() *KeygenMessage {
	if x, ok := x.GetContent().(*Content_Keygen); ok {
		return x.Keygen
	}
	return nil
}

func (x *Content) GetSignatureRequest() *SignatureRequest {
	if x, ok := x.GetContent().(*Content_SignatureRequest); ok {
		return x.SignatureRequest
	}
	return nil
}

type isContent_Content interface {
	isContent_Content()
}

type Content_KeygenStart struct {
	KeygenStart *KeygenStart `protobuf:"bytes,1,opt,name=keygenStart,proto3,oneof"`
}

type Content_Keygen struct {
	Keygen *KeygenMessage `protobuf:"bytes,2,opt,name=keygen,proto3,oneof"`
}

type Content_SignatureRequest struct {
	SignatureRequest *SignatureRequest `protobuf:"bytes,3,opt,name=signatureRequest,proto3,oneof"`
}

func (*Content_KeygenStart) isContent_Content() {}

func (*Content_Keygen) isContent_Content() {}

func (*Content_SignatureRequest) isContent_Content() {}

type ClusterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
	From      []byte `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Encrypted bool   `protobuf:"varint,4,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	Salt      []byte `protobuf:"bytes,5,opt,name=salt,proto3,oneof" json:"salt,omitempty"`
	Nonce     []byte `protobuf:"bytes,6,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
	Content   []byte `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`
	// dont use this on the wire - only for internal use
	ParsedContent *Content `protobuf:"bytes,8,opt,name=parsedContent,proto3,oneof" json:"parsedContent,omitempty"`
}

func (x *ClusterMessage) Reset() {
	*x = ClusterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterMessage) ProtoMessage() {}

func (x *ClusterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_fc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterMessage.ProtoReflect.Descriptor instead.
func (*ClusterMessage) Descriptor() ([]byte, []int) {
	return file_fc_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterMessage) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ClusterMessage) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ClusterMessage) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ClusterMessage) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *ClusterMessage) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *ClusterMessage) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ClusterMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ClusterMessage) GetParsedContent() *Content {
	if x != nil {
		return x.ParsedContent
	}
	return nil
}

var File_fc_proto protoreflect.FileDescriptor

var file_fc_proto_rawDesc = []byte{
	0x0a, 0x08, 0x66, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61, 0x6e, 0x61, 0x67,
	0x72, 0x61, 0x6d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x66, 0x65, 0x72, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x2b, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x85, 0x01,
	0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x66, 0x65, 0x72, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4b, 0x65,
	0x79, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x65, 0x79,
	0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x67,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x6e, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x66, 0x65, 0x72, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x67, 0x65, 0x6e, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x2e, 0x66, 0x65, 0x72, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x66, 0x65, 0x72, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x5a, 0x08, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fc_proto_rawDescOnce sync.Once
	file_fc_proto_rawDescData = file_fc_proto_rawDesc
)

func file_fc_proto_rawDescGZIP() []byte {
	file_fc_proto_rawDescOnce.Do(func() {
		file_fc_proto_rawDescData = protoimpl.X.CompressGZIP(file_fc_proto_rawDescData)
	})
	return file_fc_proto_rawDescData
}

var file_fc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fc_proto_goTypes = []interface{}{
	(*KeygenStart)(nil),      // 0: anagrambuild.ferrule.KeygenStart
	(*KeygenMessage)(nil),    // 1: anagrambuild.ferrule.KeygenMessage
	(*SignatureRequest)(nil), // 2: anagrambuild.ferrule.SignatureRequest
	(*Content)(nil),          // 3: anagrambuild.ferrule.Content
	(*ClusterMessage)(nil),   // 4: anagrambuild.ferrule.ClusterMessage
}
var file_fc_proto_depIdxs = []int32{
	0, // 0: anagrambuild.ferrule.Content.keygenStart:type_name -> anagrambuild.ferrule.KeygenStart
	1, // 1: anagrambuild.ferrule.Content.keygen:type_name -> anagrambuild.ferrule.KeygenMessage
	2, // 2: anagrambuild.ferrule.Content.signatureRequest:type_name -> anagrambuild.ferrule.SignatureRequest
	3, // 3: anagrambuild.ferrule.ClusterMessage.parsedContent:type_name -> anagrambuild.ferrule.Content
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_fc_proto_init() }
func file_fc_proto_init() {
	if File_fc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeygenStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeygenMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fc_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Content_KeygenStart)(nil),
		(*Content_Keygen)(nil),
		(*Content_SignatureRequest)(nil),
	}
	file_fc_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fc_proto_goTypes,
		DependencyIndexes: file_fc_proto_depIdxs,
		MessageInfos:      file_fc_proto_msgTypes,
	}.Build()
	File_fc_proto = out.File
	file_fc_proto_rawDesc = nil
	file_fc_proto_goTypes = nil
	file_fc_proto_depIdxs = nil
}
